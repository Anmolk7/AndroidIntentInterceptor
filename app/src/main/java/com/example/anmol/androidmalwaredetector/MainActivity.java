package com.example.anmol.androidmalwaredetector;

import android.Manifest;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.text.Html;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.jar.JarFile;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {
    List<String> filepath1 = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            requestPermissions(new String[]{android.Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        }


        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
        }


        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);



        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.setDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);






        TextView txt = (TextView) findViewById(R.id.text);
        PackageManager packageManager = getPackageManager();

        List<ApplicationInfo> apps = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);


        PackageManager pm = getPackageManager();
        List<PackageInfo> pkginfo_list = pm.getInstalledPackages(PackageManager.GET_ACTIVITIES);
        List<ApplicationInfo> appinfo_list = pm.getInstalledApplications(0);
        txt.setText("");


        final String[] filepath = new String[pkginfo_list.size()];
        final String[] pkg_path = new String[pkginfo_list.size()];
        for (int x = 0; x < pkginfo_list.size(); x++) {
            PackageInfo pkginfo = pkginfo_list.get(x);
            pkg_path[x] = appinfo_list.get(x).publicSourceDir;  //store package path in array
            filepath[x] = pkg_path[x];
        }
        Arrays.sort(filepath);
        Spinner sp = (Spinner) findViewById(R.id.Spin);
        filepath1 = Arrays.asList(filepath);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item,filepath);
        sp.setAdapter(adapter);

        sp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

                Toast.makeText(MainActivity.this, filepath1.get(position), Toast.LENGTH_SHORT).show();
                callGetIntents(filepath[position]);

                //
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)

    public void callGetIntents(String manifestPath)
    {
        TextView txt= (TextView) findViewById(R.id.text);
        dataXml = "";
        getIntents(manifestPath);
       // txt.setText(dataXml);
        writeManifest();

    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void getIntents(String path) {
        try {
            JarFile jf = new JarFile(path);
            InputStream is = jf.getInputStream(jf.getEntry("AndroidManifest.xml"));
            byte[] xml = new byte[is.available()];
            int br = is.read(xml);

            decompressXML(xml);

        } catch (Exception ex) {
            System.out.println("getIntents, ex: "+ex);  ex.printStackTrace();
        }
    }
    public static int endDocTag = 0x00100101;
    public static int startTag =  0x00100102;
    public static int endTag =    0x00100103;
    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void decompressXML(byte[] xml) throws FileNotFoundException {

        int numbStrings = LEW(xml, 4*4);


        int sitOff = 0x24;

        int stOff = sitOff + numbStrings*4;

        int xmlTagOff = LEW(xml, 3*4);

        for (int ii=xmlTagOff; ii<xml.length-4; ii+=4) {
            if (LEW(xml, ii) == startTag) {
                xmlTagOff = ii;  break;
            }
        }         int off = xmlTagOff;
        int indent = 0;
        int startTagLineNo = -2;
        while (off < xml.length) {
            int tag0 = LEW(xml, off);
            //int tag1 = LEW(xml, off+1*4);
            int lineNo = LEW(xml, off+2*4);
            //int tag3 = LEW(xml, off+3*4);
            int nameNsSi = LEW(xml, off+4*4);
            int nameSi = LEW(xml, off+5*4);

            if (tag0 == startTag) { // XML START TAG
                int tag6 = LEW(xml, off+6*4);  // Expected to be 14001400
                int numbAttrs = LEW(xml, off+7*4);  // Number of Attributes to follow
                //int tag8 = LEW(xml, off+8*4);  // Expected to be 00000000
                off += 9*4;  // Skip over 6+3 words of startTag data
                String name = compXmlString(xml, sitOff, stOff, nameSi);
                //tr.addSelect(name, null);
                startTagLineNo = lineNo;

                // Look for the Attributes
                StringBuffer sb = new StringBuffer();
                for (int ii=0; ii<numbAttrs; ii++) {
                    int attrNameNsSi = LEW(xml, off);  // AttrName Namespace Str Ind, or FFFFFFFF
                    int attrNameSi = LEW(xml, off+1*4);  // AttrName String Index
                    int attrValueSi = LEW(xml, off+2*4); // AttrValue Str Ind, or FFFFFFFF
                    int attrFlags = LEW(xml, off+3*4);
                    int attrResId = LEW(xml, off+4*4);  // AttrValue ResourceId or dup AttrValue StrInd
                    off += 5*4;  // Skip over the 5 words of an attribute

                    String attrName = compXmlString(xml, sitOff, stOff, attrNameSi);
                    String attrValue = attrValueSi!=-1
                            ? compXmlString(xml, sitOff, stOff, attrValueSi)
                            : "resourceID 0x"+Integer.toHexString(attrResId);
                    sb.append(" "+attrName+"=\""+attrValue+"\"");
                    //tr.add(attrName, attrValue);
                }
                prtIndent(indent, "<"+name+sb+">");
                indent++;

            } else if (tag0 == endTag) { // XML END TAG
                indent--;
                off += 6*4;  // Skip over 6 words of endTag data
                String name = compXmlString(xml, sitOff, stOff, nameSi);
                prtIndent(indent, "</"+name+">  (line "+startTagLineNo+"-"+lineNo+")");
                //tr.parent();  // Step back up the NobTree

            } else if (tag0 == endDocTag) {  // END OF XML DOC TAG
                break;

            } else {
                System.out.println("  Unrecognized tag code '"+Integer.toHexString(tag0)
                        +"' at offset "+off);
                break;
            }
        } // end of while loop scanning tags and attributes of XML tree
        System.out.println("    end at offset "+off);
    } // end of decompressXML


    public String compXmlString(byte[] xml, int sitOff, int stOff, int strInd) {
        if (strInd < 0) return null;
        int strOff = stOff + LEW(xml, sitOff+strInd*4);
        return compXmlStringAt(xml, strOff);
    }


    public static String spaces = "                                             ";
    String dataXml = "";
    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void prtIndent(int indent, String str) throws FileNotFoundException {
        dataXml+=spaces.substring(0, Math.min(indent*2, spaces.length()))+str+"\n";

//
//        FileOutputStream outputStream;
//
//        try {
//            outputStream = openFileOutput("manifest.txt", Context.MODE_PRIVATE);
//            outputStream.write(dataXml.getBytes());
//            outputStream.close();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }


    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void writeManifest()
    {

        File file = new File(getExternalFilesDir(null), "AndroidMalwaree.txt");

        try (PrintStream out = new PrintStream(new FileOutputStream(file))) {
            out.print(dataXml);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public void format(View view) throws FileNotFoundException {

        TextView txtt = (TextView) findViewById(R.id.text);
        txtt.setText("");

        File inputfile = new File(getExternalFilesDir(null), "AndroidMalwaree.txt");
        Scanner in = new Scanner(inputfile);
        //   PrintWriter out = new PrintWriter("/storage/emulated/0/Android/data/com.example.anmol.malwaredetector/files/manifest.txt");

        List<String> permissionList = new ArrayList<>();


        int percount=0;
        while (in.hasNextLine()) {
            String line = in.nextLine();
            String permis1 = "";
            String permis2 = "";
            boolean found = false;
            String permission = "";

            for (int i = 0; !found && i < line.length(); i++) {
                char ch = line.charAt(i);
                if (ch == '_') {

                    found = true;
                    permis1 = line.substring(0, i + 1);
                    permis2 = line.substring(i + 1).trim();
                    permission = permis1 + permis2;
                  //  txtt.setText(permission);

                }
            }

            if (found) {

                if ((permission).toLowerCase().contains("READ_CONTACT".toLowerCase())) {

                    txtt.append("Permission: READ_CONTACT\n");
                }
                if ((permission).toLowerCase().contains("ACCEPT_HANDOVER".toLowerCase())) {

                    txtt.append("Permission: ACCEPT_HANDOVER\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_CHECKIN_PROPERTIES".toLowerCase())) {

                    txtt.append("Permission: ACCESS_CHECKIN_PROPERTIES\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_COARSE_LOCATION".toLowerCase())) {

                    txtt.append("Permission: ACCESS_COARSE_LOCATION\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_FINE_LOCATION".toLowerCase())) {

                    txtt.append("Permission: ACCESS_FINE_LOCATION\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_LOCATION_EXTRA_COMMANDS".toLowerCase())) {

                    txtt.append("Permission: ACCESS_LOCATION_EXTRA_COMMANDS\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_NETWORK_STATE".toLowerCase())) {

                    txtt.append("Permission: ACCESS_NETWORK_STATE\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_LOCATION_EXTRA_COMMANDS".toLowerCase())) {

                    txtt.append("Permission: ACCESS_LOCATION_EXTRA_COMMANDS\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_NOTIFICATION_POLICY".toLowerCase())) {

                    txtt.append("Permission: ACCESS_NOTIFICATION_POLICY\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_WIFI_STATE".toLowerCase())) {

                    txtt.append("Permission: ACCESS_WIFI_STATE\n");
                }
                if ((permission).toLowerCase().contains("ADD_VOICEMAIL".toLowerCase())) {

                    txtt.append("Permission: ADD_VOICEMAIL\n");
                }
                if ((permission).toLowerCase().contains("ANSWER_PHONE_CALLS".toLowerCase())) {

                    txtt.append("Permission: ANSWER_PHONE_CALLS\n");
                }
                if ((permission).toLowerCase().contains("ACCOUNT_MANAGER".toLowerCase())) {

                    txtt.append("Permission: ACCOUNT_MANAGER\n");
                }
                if ((permission).toLowerCase().contains("BIND_ACCESSIBILITY_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_ACCESSIBILITY_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BATTERY_STATS".toLowerCase())) {

                    txtt.append("Permission: BATTERY_STATS\n");
                }
                if ((permission).toLowerCase().contains("BIND_APPWIDGET".toLowerCase())) {

                    txtt.append("Permission: BIND_APPWIDGET\n");
                }
                if ((permission).toLowerCase().contains("ACCESS_WIFI_STATE".toLowerCase())) {

                    txtt.append("Permission: ACCESS_WIFI_STATE\n");
                }
                if ((permission).toLowerCase().contains("ADD_VOICEMAIL".toLowerCase())) {

                    txtt.append("Permission: ADD_VOICEMAIL\n");
                }
                if ((permission).toLowerCase().contains("ANSWER_PHONE_CALLS".toLowerCase())) {

                    txtt.append("Permission: ANSWER_PHONE_CALLS\n");
                }
                if ((permission).toLowerCase().contains("ACCOUNT_MANAGER".toLowerCase())) {

                    txtt.append("Permission: ACCOUNT_MANAGER\n");
                }
                if ((permission).toLowerCase().contains("BIND_ACCESSIBILITY_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_ACCESSIBILITY_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BATTERY_STATS".toLowerCase())) {

                    txtt.append("Permission: BATTERY_STATS\n");
                }
                if ((permission).toLowerCase().contains("BIND_APPWIDGET".toLowerCase())) {

                    txtt.append("Permission: BIND_APPWIDGET\n");
                }
                if ((permission).toLowerCase().contains("BIND_AUTOFILL_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_AUTOFILL_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BIND_CARRIER_MESSAGING_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_CARRIER_MESSAGING_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BIND_CARRIER_SERVICES".toLowerCase())) {

                    txtt.append("Permission: BIND_CARRIER_SERVICES\n");
                }
                if ((permission).toLowerCase().contains("BIND_CHOOSER_TARGET_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_CHOOSER_TARGET_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BIND_CONDITION_PROVIDER_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_CONDITION_PROVIDER_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BIND_DEVICE_ADMIN".toLowerCase())) {

                    txtt.append("Permission: BIND_DEVICE_ADMIN\n");
                }
                if ((permission).toLowerCase().contains("BIND_INCALL_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_INCALL_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BIND_INPUT_METHOD".toLowerCase())) {

                    txtt.append("Permission: BIND_INPUT_METHOD\n");
                }
                if ((permission).toLowerCase().contains("BIND_MIDI_DEVICE_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_MIDI_DEVICE_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BIND_NFC_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_NFC_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("BLUETOOTH".toLowerCase())) {

                    txtt.append("Permission: BLUETOOTH\n");
                }
                if ((permission).toLowerCase().contains("BLUETOOTH_ADMIN".toLowerCase())) {

                    txtt.append("Permission: BLUETOOTH_ADMIN\n");
                }
                if ((permission).toLowerCase().contains("BROADCAST_STICKY".toLowerCase())) {

                    txtt.append("Permission: BROADCAST_STICKY\n");
                }
                if ((permission).toLowerCase().contains("BIND_DREAM_SERVICE".toLowerCase())) {

                    txtt.append("Permission: BIND_DREAM_SERVICE\n");
                }
                if ((permission).toLowerCase().contains("CHANGE_NETWORK_STATE".toLowerCase())) {

                    txtt.append("Permission: CHANGE_NETWORK_STATE\n");
                }
                if ((permission).toLowerCase().contains("CHANGE_WIFI_MULTICAST_STATE".toLowerCase())) {

                    txtt.append("Permission: CHANGE_WIFI_MULTICAST_STATE\n");
                }
                if ((permission).toLowerCase().contains("CHANGE_WIFI_STATE".toLowerCase())) {

                    txtt.append("Permission: CHANGE_WIFI_STATE\n");
                }
                if ((permission).toLowerCase().contains("DISABLE_KEYGUARD".toLowerCase())) {

                    txtt.append("Permission: DISABLE_KEYGUARD\n");
                }
                if ((permission).toLowerCase().contains("EXPAND_STATUS_BAR".toLowerCase())) {

                    txtt.append("Permission: EXPAND_STATUS_BAR\n");
                }
                if ((permission).toLowerCase().contains("GET_PACKAGE_SIZE".toLowerCase())) {

                    txtt.append("Permission: GET_PACKAGE_SIZE\n");
                }
                if ((permission).toLowerCase().contains("INTERNET".toLowerCase())) {

                    txtt.append("Permission: INTERNET\n");
                }
                if ((permission).toLowerCase().contains("KILL_BACKGROUND_PROCESSES".toLowerCase())) {

                    txtt.append("Permission: KILL_BACKGROUND_PROCESSES\n");
                }
                if ((permission).toLowerCase().contains("BIND_DREAM_SERVICE".toLowerCase())) {

                    txtt.append("Permission: MODIFY_AUDIO_SETTINGS\n");
                }
                if ((permission).toLowerCase().contains("NFC".toLowerCase())) {

                    txtt.append("Permission: NFC\n");
                }
                if ((permission).toLowerCase().contains("READ_SYNC_SETTINGS".toLowerCase())) {

                    txtt.append("Permission: READ_SYNC_SETTINGS\n");
                }
                if ((permission).toLowerCase().contains("READ_SYNC_STATS".toLowerCase())) {

                    txtt.append("Permission: READ_SYNC_STATS\n");
                }
                if ((permission).toLowerCase().contains("RECEIVE_BOOT_COMPLETED".toLowerCase())) {

                    txtt.append("Permission: RECEIVE_BOOT_COMPLETED\n");
                }
                if ((permission).toLowerCase().contains("REORDER_TASKS".toLowerCase())) {

                    txtt.append("Permission: REORDER_TASKS\n");
                }
                if ((permission).toLowerCase().contains("REQUEST_IGNORE_BATTERY_OPTIMIZATIONS".toLowerCase())) {

                    txtt.append("Permission: REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\n");
                }
                if ((permission).toLowerCase().contains("REQUEST_INSTALL_PACKAGES".toLowerCase())) {

                    txtt.append("Permission: REQUEST_INSTALL_PACKAGES\n");
                }
                if ((permission).toLowerCase().contains("SET_ALARM".toLowerCase())) {

                    txtt.append("Permission: SET_ALARM\n");
                }
                if ((permission).toLowerCase().contains("SET_TIME_ZONE".toLowerCase())) {

                    txtt.append("Permission: SET_TIME_ZONE\n");
                }
                if ((permission).toLowerCase().contains("SET_WALLPAPER".toLowerCase())) {

                    txtt.append("Permission: SET_WALLPAPER\n");
                }
                if ((permission).toLowerCase().contains("TRANSMIT_IR".toLowerCase())) {

                    txtt.append("Permission: TRANSMIT_IR\n");
                }
                if ((permission).toLowerCase().contains("UNINSTALL_SHORTCUT".toLowerCase())) {

                    txtt.append("Permission: UNINSTALL_SHORTCUT\n");
                }
                if ((permission).toLowerCase().contains("USE_FINGERPRINT".toLowerCase())) {

                    txtt.append("Permission: USE_FINGERPRINT\n");
                }
                if ((permission).toLowerCase().contains("VIBRATE".toLowerCase())) {

                    txtt.append("Permission: VIBRATE\n");
                }
                if ((permission).toLowerCase().contains("WAKE_LOCK".toLowerCase())) {

                    txtt.append("Permission: WAKE_LOCK\n");
                }
                if ((permission).toLowerCase().contains("WRITE_SYNC_SETTINGS".toLowerCase())) {

                    txtt.append("Permission: WRITE_SYNC_SETTINGS\n");
                }
                //DANGER PERMISSIONS


                if ((permission).toLowerCase().contains("READ_CALENDAR".toLowerCase())) {

                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: READ_CALENDAR</font>")); txtt.append("\n");
                    percount++;

                }
                if ((permission).toLowerCase().contains("WRITE_CALENDAR".toLowerCase())) {

                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: WRITE_CALENDAR</font>")); txtt.append("\n");
                    percount++;
                }
                if ((permission).toLowerCase().contains("CAMERA".toLowerCase())) {

                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: CAMERA</font>")); txtt.append("\n");
                    percount++;
                }
                if ((permission).toLowerCase().contains("WRITE_CONTACTS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: WRITE_CONTACTS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("GET_ACCOUNTS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: GET_ACCOUNTS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("RECORD_AUDIO".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: RECORD_AUDIO</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("READ_PHONE_STATE".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: READ_PHONE_STATE</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("READ_PHONE_NUMBERS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: READ_PHONE_NUMBERS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("CALL_PHONE".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: CALL_PHONE</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("ANSWER_PHONE_CALLS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: ANSWER_PHONE_CALLS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("READ_CALL_LOG".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: READ_CALL_LOG</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("WRITE_CALL_LOG".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: WRITE_CALL_LOG</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("ADD_VOICEMAIL".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: ADD_VOICEMAIL</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("USE_SIP".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: USE_SIP</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("PROCESS_OUTGOING_CALLS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: PROCESS_OUTGOING_CALLS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("BODY_SENSORS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: BODY_SENSORS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("SEND_SMS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: SEND_SMS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("RECEIVE_SMS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: RECEIVE_SMS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("RECEIVE_WAP_PUSH".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: RECEIVE_WAP_PUSH</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("RECEIVE_MMS".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: RECEIVE_MMS</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("READ_EXTERNAL_STORAGE".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: READ_EXTERNAL_STORAGE</font>")); txtt.append("\n");
                }
                if ((permission).toLowerCase().contains("WRITE_EXTERNAL_STORAGE".toLowerCase())) {
                    percount++;
                    txtt.append(Html.fromHtml("<font color=#b20000> Permission: WRITE_EXTERNAL_STORAGE</font>")); txtt.append("\n");
                }






            }
            else {
                txtt.setText("NO PERMISSIONS REQUESTED BY APPLICATION\n");
            }

        }
        if(percount>1)
        {
            //txtt.append("\n\n");
            txtt.append(Html.fromHtml("<br/><font size =12> THREAT LEVEL: </font> <font color=#b20000>DANGER</font>"));
        }
        else
        {

           // txtt.append("\n\n");
            txtt.append(Html.fromHtml("<br/>THREAT LEVEL: <font color=#3CB371>NORMAL</font>"));
        }

        in.close();
        //out.close();
    }
    public String compXmlStringAt(byte[] arr, int strOff) {
        int strLen = arr[strOff + 1] << 8 & 0xff00 | arr[strOff] & 0xff;
        byte[] chars = new byte[strLen];
        for (int ii = 0; ii < strLen; ii++) {
            chars[ii] = arr[strOff + 2 + ii * 2];
        }
        return new String(chars);
    }

    public int LEW(byte[] arr, int off) {
        return arr[off+3]<<24&0xff000000 | arr[off+2]<<16&0xff0000
                | arr[off+1]<<8&0xff00 | arr[off]&0xFF;
    }


    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }
}
