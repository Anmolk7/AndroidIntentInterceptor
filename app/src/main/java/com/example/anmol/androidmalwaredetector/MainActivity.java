package com.example.anmol.androidmalwaredetector;

import android.Manifest;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.text.Html;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import org.jsoup.Jsoup;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.jar.JarFile;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            requestPermissions(new String[]{android.Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        }


        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
        }


        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);



        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.setDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        TextView txt = (TextView) findViewById(R.id.text);
        PackageManager packageManager = getPackageManager();

        List<ApplicationInfo> apps = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);


        PackageManager pm = getPackageManager();
        List<PackageInfo> pkginfo_list = pm.getInstalledPackages(PackageManager.GET_ACTIVITIES);
        List<ApplicationInfo> appinfo_list = pm.getInstalledApplications(0);
        txt.setText("");

        final HashMap<String,String> appMap = new HashMap<>();
        final String[] filepath = new String[pkginfo_list.size()];
        final String[] appname = new String[pkginfo_list.size()];
        final String[] pkg_path = new String[pkginfo_list.size()];

        for (int x = 0; x < pkginfo_list.size(); x++) {

            pkg_path[x] = appinfo_list.get(x).publicSourceDir;  //store package path in array
            filepath[x] = pkg_path[x];
            appname[x]=appinfo_list.get(x).loadLabel(getPackageManager()).toString();
            appMap.put(appname[x],filepath[x]);


        }

        Arrays.sort(appname);
        Spinner sp = (Spinner) findViewById(R.id.Spin);


        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item,appname);
        sp.setAdapter(adapter);

        sp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

               callGetIntents(appMap.get(appname[position]));
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }


    public void parseXml(View view)
    {
        jsoupParse();
    }


public void jsoupParse()
{
    TextView txt=(TextView) findViewById(R.id.text);
    org.jsoup.nodes.Document doc = Jsoup.parse(dataXml);
    List<String> permisList = new ArrayList<String>();
    Elements permission1 = doc.getElementsByTag("uses-permission");
    ListView listView= (ListView) findViewById(R.id.list);
    int pcount=0;

    for (org.jsoup.nodes.Element element : permission1) {
        String permissionName = element.attr("name");
        if(element.attr("name").toString().endsWith("SMS_RECEIVED") || element.attr("name").toString().endsWith("READ_SMS")
                || element.attr("name").toString().endsWith("READ_CALENDAR")
                || element.attr("name").toString().endsWith("WRITE_CALENDAR")
                || element.attr("name").toString().endsWith("CAMERA")
                || element.attr("name").toString().endsWith("READ_CONTACTS")
                || element.attr("name").toString().endsWith("WRITE_CONTACTS")
                || element.attr("name").toString().endsWith("GET_ACCOUNTS")
                || element.attr("name").toString().endsWith("ACCESS_FINE_LOCATION")
                || element.attr("name").toString().endsWith("ACCESS_COARSE_LOCATION")
                || element.attr("name").toString().endsWith("RECORD_AUDIO")
                || element.attr("name").toString().endsWith("READ_PHONE_STATE")
                || element.attr("name").toString().endsWith("READ_PHONE_NUMBERS")
                || element.attr("name").toString().endsWith("WRITE_CALL_LOG")
                || element.attr("name").toString().endsWith("SEND_SMS")
                || element.attr("name").toString().endsWith("RECEIVE_SMS")
                || element.attr("name").toString().endsWith("RECEIVE_MMS")
                || element.attr("name").toString().endsWith("RECEIVE_WAP_PUSH")
                || element.attr("name").toString().endsWith("READ_EXTERNAL_STORAGE")
                || element.attr("name").toString().endsWith("WRITE_EXTERNAL_STORAGE")
                )
        {




            permisList.add(permissionName);
            ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.customyellowlayout, permisList);
            listView.setAdapter(adapter);
          //  txt.append(Html.fromHtml("<font color=#FFFF99>"+permissionName+"</font>"));
        //    txt.append("\n");
            pcount++;
        }
       else {
            //txt.append(permissionName+"\n");
            permisList.add(permissionName);
            ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,R.layout.customlayout, permisList);
            listView.setAdapter(adapter);
        }
    }

    Elements permission2 = doc.getElementsByTag("permission");
    for (org.jsoup.nodes.Element element : permission2) {
        String permissionName = element.attr("name");
    if(element.attr("name").toString().endsWith("SMS_RECEIVED") || element.attr("name").toString().endsWith("READ_SMS")
            || element.attr("name").toString().endsWith("READ_CALENDAR")
            || element.attr("name").toString().endsWith("WRITE_CALENDAR")
            || element.attr("name").toString().endsWith("CAMERA")
            || element.attr("name").toString().endsWith("READ_CONTACTS")
            || element.attr("name").toString().endsWith("WRITE_CONTACTS")
            || element.attr("name").toString().endsWith("GET_ACCOUNTS")
            || element.attr("name").toString().endsWith("ACCESS_FINE_LOCATION")
            || element.attr("name").toString().endsWith("ACCESS_COARSE_LOCATION")
            || element.attr("name").toString().endsWith("RECORD_AUDIO")
            || element.attr("name").toString().endsWith("READ_PHONE_STATE")
            || element.attr("name").toString().endsWith("READ_PHONE_NUMBERS")
            || element.attr("name").toString().endsWith("WRITE_CALL_LOG")
            || element.attr("name").toString().endsWith("SEND_SMS")
            || element.attr("name").toString().endsWith("RECEIVE_SMS")
            || element.attr("name").toString().endsWith("RECEIVE_MMS")
            || element.attr("name").toString().endsWith("RECEIVE_WAP_PUSH")
            || element.attr("name").toString().endsWith("READ_EXTERNAL_STORAGE")
            || element.attr("name").toString().endsWith("WRITE_EXTERNAL_STORAGE")
            )
    {

        permisList.add(permissionName);
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.customyellowlayout, permisList);
        listView.setAdapter(adapter);
        pcount++;

    }
    else {
        //txt.append(permissionName+"\n");
        permisList.add(permissionName);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,R.layout.customlayout, permisList);
        listView.setAdapter(adapter);
    }
    }

    Elements permission3 = doc.getElementsByTag("action");
    for (org.jsoup.nodes.Element element : permission3) {
        String permissionName = element.attr("name");

        if(element.attr("name").toString().endsWith("SMS_RECEIVED") || element.attr("name").toString().endsWith("READ_SMS")
                || element.attr("name").toString().endsWith("READ_CALENDAR")
                || element.attr("name").toString().endsWith("WRITE_CALENDAR")
                || element.attr("name").toString().endsWith("CAMERA")
                || element.attr("name").toString().endsWith("READ_CONTACTS")
                || element.attr("name").toString().endsWith("WRITE_CONTACTS")
                || element.attr("name").toString().endsWith("GET_ACCOUNTS")
                || element.attr("name").toString().endsWith("ACCESS_FINE_LOCATION")
                || element.attr("name").toString().endsWith("ACCESS_COARSE_LOCATION")
                || element.attr("name").toString().endsWith("RECORD_AUDIO")
                || element.attr("name").toString().endsWith("READ_PHONE_STATE")
                || element.attr("name").toString().endsWith("READ_PHONE_NUMBERS")
                || element.attr("name").toString().endsWith("WRITE_CALL_LOG")
                || element.attr("name").toString().endsWith("SEND_SMS")
                || element.attr("name").toString().endsWith("RECEIVE_SMS")
                || element.attr("name").toString().endsWith("RECEIVE_MMS")
                || element.attr("name").toString().endsWith("RECEIVE_WAP_PUSH")
                || element.attr("name").toString().endsWith("READ_EXTERNAL_STORAGE")
                || element.attr("name").toString().endsWith("WRITE_EXTERNAL_STORAGE")
                )
        {

            permisList.add(permissionName);
            ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.customyellowlayout, permisList);
            listView.setAdapter(adapter);
            pcount++;

        }
        else {
            //txt.append(permissionName+"\n");
            permisList.add(permissionName);
            ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,R.layout.customlayout, permisList);
            listView.setAdapter(adapter);
        }
    }

    if(pcount>0)
    {
        txt.setText(Html.fromHtml("<font color=#FF0000>"+"THREAT LEVEL: DANGER"+"</font>"));

    }
    else {

        txt.setText(Html.fromHtml("<font color=#DCDCDC>"+"THREAT LEVEL: NORMAL"+"</font>"));


    }
    }


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)

    public void callGetIntents(String manifestPath)
    {
        TextView txt= (TextView) findViewById(R.id.text);
        dataXml = "";
        getIntents(manifestPath);
        txt.setText("");
        writeManifest();

    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void getIntents(String path) {
        try {
            JarFile jf = new JarFile(path);
            InputStream is = jf.getInputStream(jf.getEntry("AndroidManifest.xml"));
            byte[] xml = new byte[is.available()];
            int br = is.read(xml);

            decompressXML(xml);

        } catch (Exception ex) {
            System.out.println("getIntents, ex: "+ex);  ex.printStackTrace();
        }
    }
    public static int endDocTag = 0x00100101;
    public static int startTag =  0x00100102;
    public static int endTag =    0x00100103;
    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void decompressXML(byte[] xml) throws FileNotFoundException {

        int numbStrings = LEW(xml, 4*4);


        int sitOff = 0x24;

        int stOff = sitOff + numbStrings*4;

        int xmlTagOff = LEW(xml, 3*4);

        for (int ii=xmlTagOff; ii<xml.length-4; ii+=4) {
            if (LEW(xml, ii) == startTag) {
                xmlTagOff = ii;  break;
            }
        }         int off = xmlTagOff;
        int indent = 0;
        int startTagLineNo = -2;
        while (off < xml.length) {
            int tag0 = LEW(xml, off);
            //int tag1 = LEW(xml, off+1*4);
            int lineNo = LEW(xml, off+2*4);
            //int tag3 = LEW(xml, off+3*4);
            int nameNsSi = LEW(xml, off+4*4);
            int nameSi = LEW(xml, off+5*4);

            if (tag0 == startTag) { // XML START TAG
                int tag6 = LEW(xml, off+6*4);  // Expected to be 14001400
                int numbAttrs = LEW(xml, off+7*4);  // Number of Attributes to follow
                //int tag8 = LEW(xml, off+8*4);  // Expected to be 00000000
                off += 9*4;  // Skip over 6+3 words of startTag data
                String name = compXmlString(xml, sitOff, stOff, nameSi);
                //tr.addSelect(name, null);
                startTagLineNo = lineNo;

                // Look for the Attributes
                StringBuffer sb = new StringBuffer();
                for (int ii=0; ii<numbAttrs; ii++) {
                    int attrNameNsSi = LEW(xml, off);  // AttrName Namespace Str Ind, or FFFFFFFF
                    int attrNameSi = LEW(xml, off+1*4);  // AttrName String Index
                    int attrValueSi = LEW(xml, off+2*4); // AttrValue Str Ind, or FFFFFFFF
                    int attrFlags = LEW(xml, off+3*4);
                    int attrResId = LEW(xml, off+4*4);  // AttrValue ResourceId or dup AttrValue StrInd
                    off += 5*4;  // Skip over the 5 words of an attribute

                    String attrName = compXmlString(xml, sitOff, stOff, attrNameSi);
                    String attrValue = attrValueSi!=-1
                            ? compXmlString(xml, sitOff, stOff, attrValueSi)
                            : "resourceID 0x"+Integer.toHexString(attrResId);
                    sb.append(" "+attrName+"=\""+attrValue+"\"");
                    //tr.add(attrName, attrValue);
                }
                prtIndent(indent, "<"+name+sb+">");
                indent++;

            } else if (tag0 == endTag) { // XML END TAG
                indent--;
                off += 6*4;  // Skip over 6 words of endTag data
                String name = compXmlString(xml, sitOff, stOff, nameSi);
                prtIndent(indent, "</"+name+">");
                //tr.parent();  // Step back up the NobTree

            } else if (tag0 == endDocTag) {  // END OF XML DOC TAG
                break;

            } else {
                System.out.println("  Unrecognized tag code '"+Integer.toHexString(tag0)
                        +"' at offset "+off);
                break;
            }
        } // end of while loop scanning tags and attributes of XML tree
        System.out.println("    end at offset "+off);
    } // end of decompressXML


    public String compXmlString(byte[] xml, int sitOff, int stOff, int strInd) {
        if (strInd < 0) return null;
        int strOff = stOff + LEW(xml, sitOff+strInd*4);
        return compXmlStringAt(xml, strOff);
    }


    public static String spaces = "                                             ";
    String dataXml = "";
    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void prtIndent(int indent, String str) throws FileNotFoundException {
        dataXml+=spaces.substring(0, Math.min(indent*2, spaces.length()))+str+"\n";

    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void writeManifest()
    {

        File file = new File(getExternalFilesDir(null), "AndroidMalwaree.xml");

        try (PrintStream out = new PrintStream(new FileOutputStream(file))) {
            out.print(dataXml);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public String compXmlStringAt(byte[] arr, int strOff) {
        int strLen = arr[strOff + 1] << 8 & 0xff00 | arr[strOff] & 0xff;
        byte[] chars = new byte[strLen];
        for (int ii = 0; ii < strLen; ii++) {
            chars[ii] = arr[strOff + 2 + ii * 2];
        }
        return new String(chars);
    }

    public int LEW(byte[] arr, int off) {
        return arr[off+3]<<24&0xff000000 | arr[off+2]<<16&0xff0000
                | arr[off+1]<<8&0xff00 | arr[off]&0xFF;
    }


    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
            Intent intent1 = new Intent(this, StartupActivity.class);
            startActivity(intent1);
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }
}
